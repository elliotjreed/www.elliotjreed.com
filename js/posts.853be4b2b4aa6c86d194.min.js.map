{"version":3,"sources":["webpack:///./components/Posts.tsx","webpack:///./components/PostCard.tsx"],"names":["props","controller","AbortController","state","category","match","params","replace","loading","posts","postsInCategory","bind","capitalise","charAt","toUpperCase","slice","componentDidMount","window","location","pathname","search","this","fetchPostsInCategory","componentDidUpdate","prevProps","prevState","setState","componentWillUnmount","abort","render","Posts","name","content","className","Object","keys","fetch","then","response","reverse","map","post","key","toLowerCase","date","substr","title","fetchPostContent","to","dateTime","dangerouslySetInnerHTML","__html","markdown","substring","indexOf"],"mappings":"grBAkBA,cAOE,WAAYA,GAAZ,MACE,YAAMA,IAAM,K,OACZ,EAAKC,WAAa,IAAIC,gBAEtB,EAAKC,MAAQ,CACXC,SAAUJ,EAAMK,MAAMC,OAAOF,SAASG,QAAQ,IAAK,KACnDC,SAAS,EACTC,MAAO,IAGT,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAAK,G,EAkErD,OAnF2B,OACV,EAAAC,WAAf,SAA0BR,GACxB,OAAOA,EAASS,OAAO,GAAGC,cAAgBV,EAASW,MAAM,IAkBpD,YAAAC,kBAAP,WACE,IAAiBC,OAAOC,SAASC,SAAWD,SAASE,QAErDC,KAAKC,wBAGA,YAAAC,mBAAP,SAA0BC,EAA4BC,GAChDJ,KAAKlB,MAAMC,WAAaiB,KAAKrB,MAAMK,MAAMC,OAAOF,UAClDiB,KAAKK,SAAS,CAAEtB,SAAUiB,KAAKrB,MAAMK,MAAMC,OAAOF,UAAYiB,KAAKC,uBAIhE,YAAAK,qBAAP,WACEN,KAAKpB,WAAW2B,SAGX,YAAAC,OAAP,WACE,OACE,4BACE,gBAAC,SAAM,KACL,6BAAQC,EAAMlB,WAAWS,KAAKlB,MAAMC,UAAY,qBAChD,wBACE2B,KAAK,cACLC,QAAS,yCAA2CF,EAAMlB,WAAWS,KAAKlB,MAAMC,aAGpF,2BAAS6B,UAAU,iCACjB,uBAAKA,UAAU,yBACb,uBAAKA,UAAU,+BACb,sBAAIA,UAAU,SAASH,EAAMlB,WAAWS,KAAKlB,MAAMC,cAIzD,2BAAS6B,UAAU,kBACjB,uBAAKA,UAAU,YACb,uBAAKA,UAAU,4BACZZ,KAAKlB,MAAMK,QACV,gBAAC,IAAO,MAERa,KAAKX,gBAAgBW,KAAKlB,MAAMM,MAAMyB,OAAOC,KAAKd,KAAKlB,MAAMM,OAAO,UAS1E,YAAAa,qBAAR,sBACEc,MAAM,qCAAuCf,KAAKlB,MAAMC,UACrDiC,MAAK,SAAAC,GAAY,OAAAA,EAAA,UACjBD,MAAK,SAAA5B,GAAS,SAAKiB,SAAS,CAAEjB,MAAK,EAAED,SAAvB,QAGX,YAAAE,gBAAR,SAAwBD,GAAxB,WACE,OACE,0BACGA,EAAM8B,UAAUC,KAAI,SAAAC,GAAQ,OAC3B,gBAAC,IAAQ,CAACC,IAAKD,EAAMrC,SAAU,EAAKD,MAAMC,SAASuC,cAAeF,KADvC,SAMrC,EAnFA,CAA2B,c,mOAA3B,E,m0BCEA,cAGE,WAAYzC,GAAZ,MACE,YAAMA,IAAM,K,OAEZ,EAAKC,WAAa,IAAIC,gBAEtB,EAAKC,MAAQ,CACXC,SAAU,EAAKJ,MAAMI,SACrB4B,QAAS,GACTY,KAAM,EAAK5C,MAAMyC,KAAKI,OAAO,EAAG,IAChCrC,SAAS,EACTiC,KAAM,EAAKzC,MAAMyC,KACjBK,MAAO,EAAK9C,MAAMyC,KAAKI,OAAO,IAAI9B,MAAM,GAAI,I,EAoElD,OAlF8B,OAkBrB,YAAAC,kBAAP,WACEK,KAAK0B,oBAGA,YAAAxB,mBAAP,SAA0BC,EAA4BC,GAChDJ,KAAKlB,MAAMsC,OAASpB,KAAKrB,MAAMyC,MACjCpB,KAAKK,SACH,CACEtB,SAAUiB,KAAKrB,MAAMI,SACrBwC,KAAMvB,KAAKrB,MAAMyC,KAAKI,OAAO,EAAG,IAChCJ,KAAMpB,KAAKrB,MAAMyC,KACjBK,MAAOzB,KAAKrB,MAAMyC,KAAKI,OAAO,IAAI9B,MAAM,GAAI,IAE9CM,KAAK0B,mBAKJ,YAAApB,qBAAP,WACEN,KAAKpB,WAAW2B,SAGX,YAAAC,OAAP,WACE,OACE,uBAAKI,UAAU,gBACb,uBAAKA,UAAU,gBACb,uBAAKA,UAAU,qBACb,0BACE,gBAAC,IAAI,CACHA,UAAU,sBACVe,GAAI,SAAW3B,KAAKlB,MAAMC,SAAW,IAAMiB,KAAKlB,MAAMsC,KAAK1B,MAAM,GAAI,GAAGR,QAAQ,OAAQ,MAEvFc,KAAKlB,MAAM2C,QAGhB,uBAAKb,UAAU,8BACb,gBAAC,IAAI,CAACe,GAAI,aAAe3B,KAAKlB,MAAMC,SAAU6B,UAAU,+BACrDZ,KAAKlB,MAAMC,UAEd,wBAAM6C,SAAU5B,KAAKlB,MAAMyC,KAAMX,UAAU,kBACxCZ,KAAKlB,MAAMyC,QAIlB,uBAAKX,UAAU,wBACZZ,KAAKlB,MAAMK,QAAU,gBAAC,IAAO,MAAM,uBAAK0C,wBAAyB,CAAEC,OAAQ9B,KAAKlB,MAAM6B,eAOzF,YAAAe,iBAAR,sBACEX,MAAM,oCAAsCf,KAAKlB,MAAMC,SAAW,IAAMiB,KAAKlB,MAAMsC,MAChFJ,MAAK,SAAAC,GAAY,OAAAA,EAAA,UACjBD,MAAK,SAAAe,GAAY,OAAAA,EAASC,UAAUD,EAASE,QAAQ,MAApC,MACjBjB,MAAK,SAAAe,GAAY,eACjBf,MAAK,SAAAL,GACJ,SAAKN,SAAS,CACZM,QAASA,EAAQqB,UAAU,EAAKlD,MAAM6B,SACtCxB,SAAS,QAInB,EAlFA,CAA8B,c,sOAA9B,E","file":"js/posts.853be4b2b4aa6c86d194.min.js","sourcesContent":["import * as React from \"react\";\nimport * as ReactGA from \"react-ga\";\nimport { Helmet } from \"react-helmet\";\n\nimport \"./../assets/scss/App.scss\";\nimport { PostCard } from \"./PostCard\";\nimport { Spinner } from \"./Spinner\";\n\ninterface Props {\n  match: { params: { category: string } };\n}\n\ninterface State {\n  category: string;\n  loading: boolean;\n  posts: string[];\n}\n\nexport class Posts extends React.Component<Props, State> {\n  private static capitalise(category: string): string {\n    return category.charAt(0).toUpperCase() + category.slice(1);\n  }\n\n  private controller: AbortController;\n\n  constructor(props: Props) {\n    super(props);\n    this.controller = new AbortController();\n\n    this.state = {\n      category: props.match.params.category.replace(\"-\", \" \"),\n      loading: true,\n      posts: []\n    };\n\n    this.postsInCategory = this.postsInCategory.bind(this);\n  }\n\n  public componentDidMount(): void {\n    ReactGA.pageview(window.location.pathname + location.search);\n\n    this.fetchPostsInCategory();\n  }\n\n  public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>): void {\n    if (this.state.category !== this.props.match.params.category) {\n      this.setState({ category: this.props.match.params.category }, this.fetchPostsInCategory);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <main>\n        <Helmet>\n          <title>{Posts.capitalise(this.state.category) + \" | Elliot J. Reed\"}</title>\n          <meta\n            name=\"description\"\n            content={\"Various posts, guides, and how-tos on \" + Posts.capitalise(this.state.category)}\n          />\n        </Helmet>\n        <section className=\"hero is-info is-small is-bold\">\n          <div className=\"hero-body main-banner\">\n            <div className=\"container has-text-centered\">\n              <h1 className=\"title\">{Posts.capitalise(this.state.category)}</h1>\n            </div>\n          </div>\n        </section>\n        <section className=\"container home\">\n          <div className=\"articles\">\n            <div className=\"column is-10 is-offset-1\">\n              {this.state.loading ? (\n                <Spinner />\n              ) : (\n                this.postsInCategory(this.state.posts[Object.keys(this.state.posts)[0]])\n              )}\n            </div>\n          </div>\n        </section>\n      </main>\n    );\n  }\n\n  private fetchPostsInCategory(): void {\n    fetch(\"https://api.elliotjreed.com/posts/\" + this.state.category)\n      .then(response => response.json())\n      .then(posts => this.setState({ posts, loading: false }));\n  }\n\n  private postsInCategory(posts: string[]): React.ReactNode {\n    return (\n      <ul>\n        {posts.reverse().map(post => (\n          <PostCard key={post} category={this.state.category.toLowerCase()} post={post} />\n        ))}\n      </ul>\n    );\n  }\n}\n","import * as marked from \"marked\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Spinner } from \"./Spinner\";\n\ninterface Props {\n  category: string;\n  post: string;\n}\n\ninterface State {\n  category: string;\n  content: string;\n  date: string;\n  loading: boolean;\n  post: string;\n  title: string;\n}\n\nexport class PostCard extends React.Component<Props, State> {\n  private controller: AbortController;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.controller = new AbortController();\n\n    this.state = {\n      category: this.props.category,\n      content: \"\",\n      date: this.props.post.substr(0, 10),\n      loading: true,\n      post: this.props.post,\n      title: this.props.post.substr(11).slice(0, -3)\n    };\n  }\n\n  public componentDidMount(): void {\n    this.fetchPostContent();\n  }\n\n  public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>): void {\n    if (this.state.post !== this.props.post) {\n      this.setState(\n        {\n          category: this.props.category,\n          date: this.props.post.substr(0, 10),\n          post: this.props.post,\n          title: this.props.post.substr(11).slice(0, -3)\n        },\n        this.fetchPostContent\n      );\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <div className=\"card article\">\n        <div className=\"card-content\">\n          <div className=\"has-text-centered\">\n            <h3>\n              <Link\n                className=\"title article-title\"\n                to={\"/post/\" + this.state.category + \"/\" + this.state.post.slice(0, -3).replace(/\\s+/g, \"_\")}\n              >\n                {this.state.title}\n              </Link>\n            </h3>\n            <div className=\"tags has-addons level-item\">\n              <Link to={\"/category/\" + this.state.category} className=\"tag is-rounded tag-category\">\n                {this.state.category}\n              </Link>\n              <time dateTime={this.state.date} className=\"tag is-rounded\">\n                {this.state.date}\n              </time>\n            </div>\n          </div>\n          <div className=\"content article-body\">\n            {this.state.loading ? <Spinner /> : <div dangerouslySetInnerHTML={{ __html: this.state.content }} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private fetchPostContent(): void {\n    fetch(\"https://api.elliotjreed.com/post/\" + this.state.category + \"/\" + this.state.post)\n      .then(response => response.text())\n      .then(markdown => markdown.substring(markdown.indexOf(\"\\n\") + 1))\n      .then(markdown => marked(markdown))\n      .then(content =>\n        this.setState({\n          content: content.substring(this.state.content),\n          loading: false\n        })\n      );\n  }\n}\n"],"sourceRoot":""}