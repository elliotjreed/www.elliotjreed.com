{"version":3,"sources":["webpack:///./components/Home.tsx","webpack:///./components/PostCard.tsx","webpack:///./components/AllPosts.tsx"],"names":["props","controller","AbortController","componentDidMount","window","location","pathname","search","componentWillUnmount","this","abort","render","name","content","className","src","alt","href","state","category","date","post","substr","loading","title","slice","fetchPostContent","componentDidUpdate","prevProps","prevState","setState","to","replace","dateTime","dangerouslySetInnerHTML","__html","fetch","then","response","markdown","substring","indexOf","posts","fetchAllPosts","self","caches","open","cache","match","Promise","resolve","reject","clone","json","catch","updateFromNetwork","clonedResponse","ok","put","reverse","map","key","split","toLowerCase"],"mappings":"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","file":"js/home.83335c67b7687537b992.min.js","sourcesContent":["import * as React from \"react\";\nimport * as ReactGA from \"react-ga\";\nimport { Helmet } from \"react-helmet\";\n\nimport \"./../assets/scss/App.scss\";\nimport { AllPosts } from \"./AllPosts\";\n\nexport class Home extends React.Component<{}, {}> {\n  private controller: AbortController;\n\n  constructor(props: null) {\n    super(props);\n\n    this.controller = new AbortController();\n  }\n\n  public componentDidMount(): void {\n    ReactGA.pageview(window.location.pathname + location.search);\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <main>\n        <Helmet>\n          <title>Elliot J. Reed</title>\n          <meta\n            name=\"description\"\n            content=\"Hi, I’m Elliot, a software developer from Nottingham. This website has guides on PHP, Symfony, Javascript, React, Python, and Linux / DevOps.\"\n          />\n        </Helmet>\n\n        <section className=\"hero is-info is-small is-bold\">\n          <div className=\"hero-body main-banner\" />\n        </section>\n\n        <section className=\"container home\">\n          <div className=\"articles\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"card\">\n                <div className=\"columns is-vcentered has-text-centered\">\n                  <div className=\"column is-4\">\n                    <figure className=\"image is-square profile-picture\">\n                      <img\n                        src=\"https://res.cloudinary.com/elliotjreed/image/upload/f_auto,q_auto/v1553434444/elliotjreed.jpg\"\n                        alt=\"Picture of Elliot\"\n                      />\n                    </figure>\n                  </div>\n\n                  <section className=\"column is-8 has-text-dark\">\n                    <h1 className=\"title is-2\">Elliot J. Reed</h1>\n                    <p>\n                      Hi! I’m Elliot, a software developer based in Nottingham. My interests are generally in\n                      E-Commerce, PHP, Javascript, Docker, and general DevOps.\n                    </p>\n                    <p>\n                      This website contains little mini-guides and snippets which may prove helpful, and if you’re stuck\n                      on anything you think I may be able to help with give me a shout on{\" \"}\n                      <a href=\"https://twitter.com/elliotjreed\">Twitter</a> or{\" \"}\n                      <a href=\"https://www.linkedin.com/in/elliotjreed/\">LinkedIn</a>.\n                    </p>\n                    <p>\n                      This website is built with React JS on the frontend, and Python on the backend using the\n                      asynchronous Sanic webserver. The code is available on{\" \"}\n                      <a href=\"https://github.com/elliotjreed\">GitHub</a>.\n                    </p>\n                  </section>\n                </div>\n              </div>\n            </div>\n\n            <AllPosts />\n          </div>\n        </section>\n      </main>\n    );\n  }\n}\n","import * as marked from \"marked\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Spinner } from \"./Spinner\";\n\ninterface Props {\n  category: string;\n  post: string;\n}\n\ninterface State {\n  category: string;\n  content: string;\n  date: string;\n  loading: boolean;\n  post: string;\n  title: string;\n}\n\nexport class PostCard extends React.Component<Props, State> {\n  private controller: AbortController;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.controller = new AbortController();\n\n    this.state = {\n      category: this.props.category,\n      content: \"\",\n      date: this.props.post.substr(0, 10),\n      loading: true,\n      post: this.props.post,\n      title: this.props.post.substr(11).slice(0, -3)\n    };\n  }\n\n  public componentDidMount(): void {\n    this.fetchPostContent();\n  }\n\n  public componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>): void {\n    if (this.state.post !== this.props.post) {\n      this.setState(\n        {\n          category: this.props.category,\n          date: this.props.post.substr(0, 10),\n          post: this.props.post,\n          title: this.props.post.substr(11).slice(0, -3)\n        },\n        this.fetchPostContent\n      );\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <div className=\"card article\">\n        <div className=\"card-content\">\n          <div className=\"has-text-centered\">\n            <h3>\n              <Link\n                className=\"title article-title\"\n                to={\"/post/\" + this.state.category + \"/\" + this.state.post.slice(0, -3).replace(/\\s+/g, \"_\")}\n              >\n                {this.state.title}\n              </Link>\n            </h3>\n            <div className=\"tags has-addons level-item\">\n              <Link to={\"/category/\" + this.state.category} className=\"tag is-rounded tag-category\">\n                {this.state.category}\n              </Link>\n              <time dateTime={this.state.date} className=\"tag is-rounded\">\n                {this.state.date}\n              </time>\n            </div>\n          </div>\n          <div className=\"content article-body\">\n            {this.state.loading ? <Spinner /> : <div dangerouslySetInnerHTML={{ __html: this.state.content }} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private fetchPostContent(): void {\n    fetch(\"https://api.elliotjreed.com/post/\" + this.state.category + \"/\" + this.state.post)\n      .then(response => response.text())\n      .then(markdown => markdown.substring(markdown.indexOf(\"\\n\") + 1))\n      .then(markdown => marked(markdown))\n      .then(content =>\n        this.setState({\n          content: content.substring(this.state.content),\n          loading: false\n        })\n      );\n  }\n}\n","import * as React from \"react\";\nimport * as ReactGA from \"react-ga\";\n\nimport \"./../assets/scss/App.scss\";\nimport { PostCard } from \"./PostCard\";\nimport { Spinner } from \"./Spinner\";\n\ninterface State {\n  posts: string[];\n  loading: boolean;\n}\n\nexport class AllPosts extends React.Component<{}, State> {\n  private controller: AbortController;\n\n  constructor(props: null) {\n    super(props);\n\n    this.controller = new AbortController();\n\n    this.state = {\n      loading: true,\n      posts: []\n    };\n  }\n\n  public componentDidMount(): void {\n    ReactGA.pageview(window.location.pathname + location.search);\n\n    this.fetchAllPosts();\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return <div className=\"column is-10 is-offset-1\">{this.state.loading ? <Spinner /> : this.posts()}</div>;\n  }\n\n  private fetchAllPosts(): Promise<void> {\n    if (!(\"caches\" in self)) {\n      return this.updateFromNetwork();\n    }\n\n    return caches\n      .open(\"ejr\")\n      .then(cache => {\n        cache\n          .match(\"https://api.elliotjreed.com/all\")\n          .then(\n            (response: Response | undefined): Promise<string[]> => {\n              return new Promise((resolve, reject): void => {\n                if (response) {\n                  resolve(response.clone().json());\n                } else {\n                  reject();\n                }\n              });\n            }\n          )\n          .then((posts: string[]): void => {\n            this.setState({\n              loading: false,\n              posts\n            });\n          })\n          .catch(() => this.updateFromNetwork());\n      })\n      .catch(() => this.updateFromNetwork());\n  }\n\n  private updateFromNetwork(): Promise<void> {\n    return fetch(\"https://api.elliotjreed.com/all\")\n      .then(\n        (response: Response): Promise<string[]> => {\n          return new Promise((resolve, reject): void => {\n            const clonedResponse = response.clone();\n            if (clonedResponse.ok) {\n              if (\"caches\" in self) {\n                caches\n                  .open(\"ejr\")\n                  .then(cache => cache.put(\"https://api.elliotjreed.com/all\", clonedResponse.clone()))\n                  .catch();\n              }\n              resolve(clonedResponse.clone().json());\n            } else {\n              reject();\n            }\n          });\n        }\n      )\n      .then((posts: string[]): void => {\n        this.setState({\n          loading: false,\n          posts\n        });\n      })\n      .catch((): void => this.controller.abort());\n  }\n\n  private posts(): React.ReactFragment {\n    return (\n      <React.Fragment>\n        {this.state.posts.reverse().map(post => (\n          <PostCard key={post} category={post.split(\"/\")[0].toLowerCase()} post={post.split(\"/\")[1]} />\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}