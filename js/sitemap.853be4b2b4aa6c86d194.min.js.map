{"version":3,"sources":["webpack:///./components/Sitemap.tsx"],"names":["props","controller","AbortController","state","loading","posts","updated","componentDidMount","window","location","pathname","search","this","fetchPostsInCategories","componentWillUnmount","abort","render","name","content","className","listOfPosts","self","caches","open","then","cache","match","response","Promise","resolve","reject","clone","json","setState","updateFromNetwork","catch","fetch","clonedResponse","ok","put","Object","keys","reverse","map","category","key","to","listOfPostsInCategory","post","toLowerCase","slice","replace","substr"],"mappings":"irBAcA,cAGE,WAAYA,GAAZ,MACE,YAAMA,IAAM,K,OAEZ,EAAKC,WAAa,IAAIC,gBAEtB,EAAKC,MAAQ,CACXC,SAAS,EACTC,MAAO,GACPC,SAAS,G,EA2If,OAtJ6B,OAepB,YAAAC,kBAAP,WACE,IAAiBC,OAAOC,SAASC,SAAWD,SAASE,QAErDC,KAAKC,0BAGA,YAAAC,qBAAP,WACEF,KAAKX,WAAWc,SAGX,YAAAC,OAAP,WACE,OACE,4BACE,gBAAC,SAAM,KACL,yDACA,wBAAMC,KAAK,cAAcC,QAAQ,iEAGnC,2BAASC,UAAU,iCACjB,uBAAKA,UAAU,eAGjB,uBAAKA,UAAU,kBACb,2BAASA,UAAU,YACjB,uBAAKA,UAAU,4BACb,uBAAKA,UAAU,gBACb,uBAAKA,UAAU,gBACb,uBAAKA,UAAU,qBACb,sBAAIA,UAAU,uBAAqB,YAGpCP,KAAKT,MAAMC,QAAU,gBAAC,IAAO,MAAMQ,KAAKQ,YAAYR,KAAKT,MAAME,cAUxE,YAAAQ,uBAAR,sBACE,MAAM,WAAYQ,KAIXC,OACJC,KAAK,OACLC,MAAK,SAAAC,GACJA,EACGC,MAAM,gCACNF,MACC,SAACG,GACC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBH,EACFE,EAAQF,EAASI,QAAQC,QAEzBF,UAKPN,MAAK,SAACnB,GACL,EAAK4B,SAAS,CACZ7B,SAAS,EACTC,MAAK,IAEF,EAAKF,MAAMG,SACd,EAAK4B,uBAGRC,OAAM,WAAM,mCAEhBA,OAAM,WAAM,gCA9BNvB,KAAKsB,qBAiCR,YAAAA,kBAAR,sBACE,OAAOE,MAAM,gCACVZ,MACC,SAACG,GACC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMO,EAAiBV,EAASI,QAC5BM,EAAeC,IACb,WAAYjB,MACdC,OACGC,KAAK,OACLC,MAAK,SAAAC,GAAS,OAAAA,EAAMc,IAAI,+BAAgCF,EAA1C,YACdF,QAELN,EAAQQ,EAAeN,QAAQC,SAE/BF,UAKPN,MAAK,SAACnB,GACL,EAAK4B,SAAS,CACZ7B,SAAS,EACTC,MAAK,OAGR8B,OAAM,WAAY,SAAKlC,WAAL,YAGf,YAAAmB,YAAR,SAAoBf,GAApB,WACE,OACE,gBAAC,WAAc,KACZmC,OAAOC,KAAKpC,GACVqC,UACAC,KAAI,SAAAC,GAAY,OACf,uBAAKzB,UAAU,uBAAuB0B,IAAKD,GACzC,sBAAIzB,UAAU,YACZ,gBAAC,IAAI,CAAC2B,GAAI,YAAcF,GAAWA,IAErC,0BAAK,EAAKG,sBALG,UAYjB,YAAAA,sBAAR,SAA8BH,GAC5B,OACE,gBAAC,WAAc,KACZhC,KAAKT,MAAME,MAAMuC,GAAUD,KAAI,SAAAK,GAAQ,OACtC,sBAAIH,IAAKG,GACP,gBAAC,IAAI,CAACF,GAAI,SAAWF,EAASK,cAAgB,IAAMD,EAAKE,MAAM,GAAI,GAAGC,QAAQ,OAAQ,MACnFH,EAAKI,OAAO,IAAIF,MAAM,GAHW,UAUhD,EAtJA,CAA6B,c,qOAA7B,E","file":"js/sitemap.853be4b2b4aa6c86d194.min.js","sourcesContent":["import * as React from \"react\";\nimport * as ReactGA from \"react-ga\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./../assets/scss/App.scss\";\nimport { Spinner } from \"./Spinner\";\n\ninterface State {\n  loading: boolean;\n  posts: object;\n  updated: boolean;\n}\n\nexport class Sitemap extends React.Component<{}, State> {\n  private controller: AbortController;\n\n  constructor(props: null) {\n    super(props);\n\n    this.controller = new AbortController();\n\n    this.state = {\n      loading: true,\n      posts: {},\n      updated: false\n    };\n  }\n\n  public componentDidMount(): void {\n    ReactGA.pageview(window.location.pathname + location.search);\n\n    this.fetchPostsInCategories();\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <main>\n        <Helmet>\n          <title>Sitemap | Elliot J. Reed</title>\n          <meta name=\"description\" content=\"A list of all the posts, guides, and how-tos on my website.\" />\n        </Helmet>\n\n        <section className=\"hero is-info is-small is-bold\">\n          <div className=\"hero-body\" />\n        </section>\n\n        <div className=\"container home\">\n          <article className=\"articles\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"card article\">\n                <div className=\"card-content\">\n                  <div className=\"has-text-centered\">\n                    <h3 className=\"title article-title\">Sitemap</h3>\n                  </div>\n\n                  {this.state.loading ? <Spinner /> : this.listOfPosts(this.state.posts)}\n                </div>\n              </div>\n            </div>\n          </article>\n        </div>\n      </main>\n    );\n  }\n\n  private fetchPostsInCategories(): Promise<void> {\n    if (!(\"caches\" in self)) {\n      return this.updateFromNetwork();\n    }\n\n    return caches\n      .open(\"ejr\")\n      .then(cache => {\n        cache\n          .match(\"https://api.elliotjreed.com/\")\n          .then(\n            (response: Response | undefined): Promise<string[]> => {\n              return new Promise((resolve, reject): void => {\n                if (response) {\n                  resolve(response.clone().json());\n                } else {\n                  reject();\n                }\n              });\n            }\n          )\n          .then((posts: string[]): void => {\n            this.setState({\n              loading: false,\n              posts\n            });\n            if (!this.state.updated) {\n              this.updateFromNetwork();\n            }\n          })\n          .catch(() => this.updateFromNetwork());\n      })\n      .catch(() => this.updateFromNetwork());\n  }\n\n  private updateFromNetwork(): Promise<void> {\n    return fetch(\"https://api.elliotjreed.com/\")\n      .then(\n        (response: Response): Promise<string[]> => {\n          return new Promise((resolve, reject): void => {\n            const clonedResponse = response.clone();\n            if (clonedResponse.ok) {\n              if (\"caches\" in self) {\n                caches\n                  .open(\"ejr\")\n                  .then(cache => cache.put(\"https://api.elliotjreed.com/\", clonedResponse.clone()))\n                  .catch();\n              }\n              resolve(clonedResponse.clone().json());\n            } else {\n              reject();\n            }\n          });\n        }\n      )\n      .then((posts: string[]): void => {\n        this.setState({\n          loading: false,\n          posts\n        });\n      })\n      .catch((): void => this.controller.abort());\n  }\n\n  private listOfPosts(posts: object): React.ReactFragment {\n    return (\n      <React.Fragment>\n        {Object.keys(posts)\n          .reverse()\n          .map(category => (\n            <div className=\"content article-body\" key={category}>\n              <h3 className=\"subtitle\">\n                <Link to={\"category/\" + category}>{category}</Link>\n              </h3>\n              <ul>{this.listOfPostsInCategory(category)}</ul>\n            </div>\n          ))}\n      </React.Fragment>\n    );\n  }\n\n  private listOfPostsInCategory(category: string): React.ReactFragment {\n    return (\n      <React.Fragment>\n        {this.state.posts[category].map(post => (\n          <li key={post}>\n            <Link to={\"/post/\" + category.toLowerCase() + \"/\" + post.slice(0, -3).replace(/\\s+/g, \"_\")}>\n              {post.substr(11).slice(0, -3)}\n            </Link>\n          </li>\n        ))}\n      </React.Fragment>\n    );\n  }\n}\n"],"sourceRoot":""}