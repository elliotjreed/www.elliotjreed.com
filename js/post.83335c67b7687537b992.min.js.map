{"version":3,"sources":["webpack:///./components/Post.tsx"],"names":["props","controller","AbortController","url","match","params","post","postWithSpaces","replace","title","substr","date","category","description","Date","toLocaleDateString","day","month","weekday","year","state","content","loading","componentDidMount","window","location","pathname","search","this","fetchPost","componentWillUnmount","abort","render","name","className","to","dateTime","dangerouslySetInnerHTML","__html","self","caches","open","then","cache","response","Promise","resolve","reject","clone","text","markdown","substring","indexOf","setState","catch","updateFromNetwork","fetch","clonedResponse","ok","put"],"mappings":"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","file":"js/post.83335c67b7687537b992.min.js","sourcesContent":["import * as marked from \"marked\";\nimport * as React from \"react\";\nimport * as ReactGA from \"react-ga\";\nimport { Helmet } from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\n\nimport { Spinner } from \"./Spinner\";\n\ninterface Props {\n  match: { params: { category: string; post: string } };\n}\n\ninterface State {\n  content: string;\n  loading: boolean;\n}\n\nexport class Post extends React.Component<Props, State> {\n  private controller: AbortController;\n  private readonly category: string;\n  private readonly post: string;\n  private readonly title: string;\n  private readonly date: string;\n  private readonly description: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.controller = new AbortController();\n\n    const url = this.props.match.params.post;\n    const postWithSpaces = url.replace(/_/g, \" \");\n    this.post = postWithSpaces + \".md\";\n    this.title = postWithSpaces.substr(11);\n    this.date = url.substr(0, 10);\n\n    this.category = this.props.match.params.category;\n    this.description =\n      new Date(this.date).toLocaleDateString(\"en-GB\", {\n        day: \"numeric\",\n        month: \"long\",\n        weekday: \"long\",\n        year: \"numeric\"\n      }) +\n      \". \" +\n      this.title +\n      \".\";\n\n    this.state = {\n      content: \"\",\n      loading: true\n    };\n  }\n\n  public componentDidMount(): void {\n    ReactGA.pageview(window.location.pathname + location.search);\n\n    this.fetchPost();\n  }\n\n  public componentWillUnmount(): void {\n    this.controller.abort();\n  }\n\n  public render(): React.ReactNode {\n    return (\n      <main>\n        <Helmet>\n          <title>{this.title + \" | Elliot J. Reed\"}</title>\n          <meta name=\"description\" content={this.description} />\n        </Helmet>\n\n        <section className=\"hero is-info is-small is-bold\">\n          <div className=\"hero-body\" />\n        </section>\n\n        <div className=\"container home\">\n          <article className=\"articles\">\n            <div className=\"column is-10 is-offset-1\">\n              <div className=\"card article\">\n                <div className=\"card-content\">\n                  <div className=\"has-text-centered\">\n                    <h3 className=\"title article-title\">{this.title}</h3>\n                    <div className=\"tags has-addons level-item\">\n                      <Link to={\"/category/\" + this.category} className=\"tag is-rounded tag-category\">\n                        {this.category}\n                      </Link>\n                      <time dateTime={this.date} className=\"tag is-rounded\">\n                        {this.date}\n                      </time>\n                    </div>\n                  </div>\n\n                  <div className=\"content article-body\">\n                    {this.state.loading ? (\n                      <Spinner />\n                    ) : (\n                      <div dangerouslySetInnerHTML={{ __html: this.state.content }} />\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </article>\n        </div>\n      </main>\n    );\n  }\n\n  private fetchPost(): Promise<void> {\n    if (!(\"caches\" in self)) {\n      return this.updateFromNetwork();\n    }\n\n    return caches\n      .open(\"ejr\")\n      .then(cache => {\n        cache\n          .match(\"https://api.elliotjreed.com/post/\" + this.category + \"/\" + this.post)\n          .then(\n            (response: Response | undefined): Promise<string> => {\n              return new Promise((resolve, reject): void => {\n                if (response) {\n                  resolve(response.clone().text());\n                } else {\n                  reject();\n                }\n              });\n            }\n          )\n          .then(markdown => markdown.substring(markdown.indexOf(\"\\n\") + 1))\n          .then(markdown => marked(markdown))\n          .then((content: string): void => {\n            this.setState({\n              content: content.substring(this.state.content.indexOf(\"\\n\") + 1),\n              loading: false\n            });\n          })\n          .catch(() => this.updateFromNetwork());\n      })\n      .catch(() => this.updateFromNetwork());\n  }\n\n  private updateFromNetwork(): Promise<void> {\n    return fetch(\"https://api.elliotjreed.com/post/\" + this.category + \"/\" + this.post)\n      .then(\n        (response: Response): Promise<string> => {\n          return new Promise((resolve, reject): void => {\n            const clonedResponse = response.clone();\n            if (clonedResponse.ok) {\n              if (\"caches\" in self) {\n                caches\n                  .open(\"ejr\")\n                  .then(cache =>\n                    cache.put(\n                      \"https://api.elliotjreed.com/post/\" + this.category + \"/\" + this.post,\n                      clonedResponse.clone()\n                    )\n                  )\n                  .catch();\n              }\n              resolve(clonedResponse.clone().text());\n            } else {\n              reject();\n            }\n          });\n        }\n      )\n      .then(markdown => markdown.substring(markdown.indexOf(\"\\n\") + 1))\n      .then(markdown => marked(markdown))\n      .then((content: string): void => {\n        this.setState({\n          content: content.substring(this.state.content.indexOf(\"\\n\") + 1),\n          loading: false\n        });\n      })\n      .catch((): void => this.controller.abort());\n  }\n}\n"],"sourceRoot":""}